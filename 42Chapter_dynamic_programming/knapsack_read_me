First, calcuate the best we can do for all knapsack sizes when only items of type 'A' are taken, then calculate the best that we can do when only 'A's' and 'B's' are taken. The solution reduces to a simple calculation for "cost[i]". Suppose an item 'j' is chosen for the knapsack: then the best value that could be acheived for the total would be "val[j]" plus "cost[i-size[j]]". If this value exceeds the best value that can be achieved without an item j, then we update "cost[i]" and "best[i]"; otherwise we leave them alone. A simple induction proof shows that this strategy solves the problem. 
